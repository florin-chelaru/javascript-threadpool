/**
* @license threadpool.js
* Copyright (c) 2015 Florin Chelaru
* License: MIT
*
* Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
* documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
* permit persons to whom the Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
* Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
* WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
* COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
* OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
(function(){'use strict';function q(b,a){try{if(a.data&&a.data.action){var g=b.c,c=a.data,e,d=c.data?c.data.args:void 0;d&&(d=d.map(function(a){return Object.getOwnPropertyDescriptor(a,"__id")?b.b[a.__id].object:a}));switch(c.action){case "load":var m=c.data.file;void 0!=m&&importScripts(m);a.ports[0].postMessage({threadId:b.a});break;case "start":b.a=c.threadId;a.ports[0].postMessage({threadId:b.a});break;case "stop":g.close();break;case "call":var f=null;"func"in c.data?f=eval("("+c.data.func+")"):f=u.reflection.evaluateFullyQualifiedTypeName(c.data.funcName,
g);e=f.apply(null,d);a.ports[0].postMessage({threadId:b.a,data:e});break;case "createShared":var f=c.data.id,n=c.data.type,c=null,c=u.reflection.evaluateFullyQualifiedTypeName(n,g),r=u.reflection.applyConstructor(c,d);b.b[f]={typeName:n,type:c,object:r};a.ports[0].postMessage({threadId:b.a});break;case "callShared":var h=b.b[c.data.target];if(!h){a.ports[0].postMessage({error:"Shared object not found: "+JSON.stringify(a.data)});break}var k=h.object,l=h.type.prototype[c.data.method];switch(c.data.type){case "function":e=
l.apply(k,d);break;case "get":e=k[l];break;case "set":e=void 0,k[l]=d[0]}a.ports[0].postMessage({threadId:b.a,data:e});break;default:a.ports[0].postMessage({threadId:b.a,error:"Unsupported action: "+JSON.stringify(a.data)})}}else a.ports[0].postMessage({threadId:b.a,error:"Unsupported message: "+JSON.stringify(a.data)})}catch(p){a.ports[0].postMessage({threadId:b.a,error:p.toString()}),u.log.error(p)}}
new function(){var b=self;this.a=null;this.c=b;this.b={};var a=this;b.addEventListener("message",function(b){q(a,b)})};}).call(this); //@ sourceMappingURL=parallel-worker.min.js.map
