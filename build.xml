<?xml version="1.0"?>
<project>
  <property name="rootpath" value="."/>
  <property name="rootdir" location="${rootpath}"/>
  <property name="level" value="ADVANCED_OPTIMIZATIONS"/>
  <property name="src" value="${rootpath}/src"/>
  <property name="compiler" value="${rootpath}/bower_components/closure-compiler/lib/vendor/compiler.jar"/>
  <property name="closure_src" value="${rootpath}/bower_components/google-closure-library/closure/goog"/>
  <property name="closure_tp_src" value="${rootpath}/bower_components/google-closure-library/third_party/closure/goog"/>
  <property name="depswriter" value="${rootpath}/bower_components/google-closure-library/closure/bin/build/depswriter.py"/>
  <property name="closurebuilder" value="${rootpath}/bower_components/google-closure-library/closure/bin/build/closurebuilder.py"/>

  <property name="main.depend" value="deps.js" />
  <property name="main.export" value="${rootpath}/export/parallel"/>
  <property name="externs" value="${rootpath}/externs/externs.js"/>

  <property name="main.compiled" value="parallel.js"/>
  <property name="main.compiledmin" value="parallel.min.js"/>

  <property name="worker.depend" value="worker-deps.js" />
  <property name="worker.export" value="${rootpath}/export/worker"/>
  <property name="worker.compiled" value="parallel-worker.js"/>
  <property name="worker.compiledmin" value="parallel-worker.min.js"/>

  <loadfile property="license" srcfile="LICENSE"/>

  <target name="main.deps" description="">
    <exec executable="python" failonerror="true">
      <arg line="${depswriter}"/>
      <arg line="--root_with_prefix=&quot;${src}/parallel ../../../../src/parallel&quot;"/>
      <arg line="--output_file=${main.depend}"/>
    </exec>

    <pathconvert property="exportfiles" pathsep=" ">
      <map from="${rootdir}" to="&#45;&#45;js ."/>
      <fileset dir="${main.export}" includes="**/*.js"/>
    </pathconvert>

    <exec executable="python" failonerror="true">
      <arg line="${closurebuilder}"/>
      <arg line="--root=&quot;${closure_src}&quot;"/>
      <arg line="--root=&quot;${closure_tp_src}&quot;"/>
      <arg line="--root=&quot;${src}/parallel&quot;"/>
      <arg line="--namespace=&quot;parallel&quot;"/>
      <redirector outputproperty="srcfiles" errorproperty="depserr">
        <outputfilterchain>
          <replacestring from="\" to="/"/>
          <prefixlines prefix=" --js ./" />
          <striplinebreaks />
          <trim />
        </outputfilterchain>
      </redirector>
    </exec>
    <!--<echo message="${depserr}"/>-->
  </target>

  <target name="main.concat" description="">
    <exec executable="python" failonerror="true">
      <arg line="${closurebuilder}"/>
      <arg line="--root=&quot;${closure_src}&quot;"/>
      <arg line="--root=&quot;${closure_tp_src}&quot;"/>
      <arg line="--root=&quot;${src}/parallel&quot;"/>
      <arg line="--namespace=&quot;parallel&quot;"/>
      <redirector outputproperty="libfiles" errorproperty="depserr">
        <outputfilterchain>
          <linecontains negate="true">
            <contains value="bower_components"/>
          </linecontains>
        </outputfilterchain>
      </redirector>
    </exec>

    <echo message="${libfiles}"/>

    <concat destfile="${main.compiled}" fixlastline="yes" eol="lf">
      <header filtering="no" trimleading="yes">${license}</header>
      <filelist files="${libfiles}"/>
      <filterchain>
        <replaceregex pattern="\/\*((?!\*\/).)+Created by((?!\*\/).)+\*\/" replace="" flags="gs" byline="false"/>
      </filterchain>
    </concat>
  </target>

  <target name="worker.deps" description="">
    <exec executable="python" failonerror="true">
      <arg line="${depswriter}"/>
      <arg line="--root_with_prefix=&quot;${src}/worker ../../../../src/worker&quot;"/>
      <arg line="--output_file=${worker.depend}"/>
    </exec>

    <pathconvert property="exportfiles" pathsep=" ">
      <map from="${rootdir}" to="&#45;&#45;js ."/>
      <fileset dir="${worker.export}" includes="**/*.js"/>
    </pathconvert>

    <exec executable="python" failonerror="true">
      <arg line="${closurebuilder}"/>
      <arg line="--root=&quot;${closure_src}&quot;"/>
      <arg line="--root=&quot;${closure_tp_src}&quot;"/>
      <arg line="--root=&quot;${src}/worker&quot;"/>
      <arg line="--namespace=&quot;parallel.worker&quot;"/>
      <redirector outputproperty="srcfiles" errorproperty="depserr">
        <outputfilterchain>
          <replacestring from="\" to="/"/>
          <prefixlines prefix=" --js ./" />
          <striplinebreaks />
          <trim />
        </outputfilterchain>
      </redirector>
    </exec>
    <!--<echo message="${depserr}"/>-->
  </target>

  <target name="worker.concat" description="">
    <exec executable="python" failonerror="true">
      <arg line="${closurebuilder}"/>
      <arg line="--root=&quot;${closure_src}&quot;"/>
      <arg line="--root=&quot;${closure_tp_src}&quot;"/>
      <arg line="--root=&quot;${src}/worker&quot;"/>
      <arg line="--namespace=&quot;parallel.worker&quot;"/>
      <redirector outputproperty="libfiles" errorproperty="depserr">
        <outputfilterchain>
          <linecontains negate="true">
            <contains value="bower_components"/>
          </linecontains>
        </outputfilterchain>
      </redirector>
    </exec>

    <echo message="${libfiles}"/>

    <concat destfile="${worker.compiled}" fixlastline="yes" eol="lf">
      <header filtering="no" trimleading="yes">${license}</header>
      <filelist files="${libfiles}"/>
      <filterchain>
        <replaceregex pattern="\/\*((?!\*\/).)+Created by((?!\*\/).)+\*\/" replace="" flags="gs" byline="false"/>
      </filterchain>
    </concat>
  </target>

  <target name="worker.compile" depends="worker.deps,worker.concat" description="">
    <local name="worker.outfile"/>
    <property name="worker.outfile" value="${worker.compiledmin}"/>
    <java jar="${compiler}" fork="true" failonerror="true">
      <arg line="&#45;&#45;compilation_level=${level}"/>
      <arg line="&#45;&#45;warning_level=VERBOSE"/>
      <arg line="&#45;&#45;define=goog.DEBUG=false"/>
      <arg line="&#45;&#45;summary_detail_level=3"/>
      <arg line="&#45;&#45;language_in=ECMASCRIPT5_STRICT"/>
      <arg line="&#45;&#45;source_map_format=V3"/>
      <arg line="&#45;&#45;output_wrapper='(function(){%output%}).call(this); //# sourceMappingURL=${worker.compiledmin}.map'"/>
      <arg line="&#45;&#45;js_output_file=${worker.outfile}"/>
      <arg line="&#45;&#45;create_source_map=${worker.outfile}.map"/>
      <arg line="&#45;&#45;manage_closure_dependencies"/>
      <arg line="&#45;&#45;externs=${externs}"/>
      <arg line="${srcfiles}"/>
      <arg line="${exportfiles}"/>
    </java>
    <loadfile srcfile="${worker.compiledmin}" property="minimized"/>
    <concat destfile="${worker.compiledmin}" eol="lf"><header filtering="no" trimleading="yes">${license}</header>${minimized}</concat>
  </target>

  <target name="main.compile" depends="main.deps,main.concat" description="">
    <local name="main.outfile"/>
    <property name="main.outfile" value="${main.compiledmin}"/>
    <java jar="${compiler}" fork="true" failonerror="true">
      <arg line="&#45;&#45;compilation_level=${level}"/>
      <arg line="&#45;&#45;warning_level=VERBOSE"/>
      <arg line="&#45;&#45;define=goog.DEBUG=false"/>
      <arg line="&#45;&#45;summary_detail_level=3"/>
      <arg line="&#45;&#45;language_in=ECMASCRIPT5_STRICT"/>
      <arg line="&#45;&#45;source_map_format=V3"/>
      <arg line="&#45;&#45;output_wrapper='(function(){%output%}).call(this); //# sourceMappingURL=${main.compiledmin}.map'"/>
      <arg line="&#45;&#45;js_output_file=${main.outfile}"/>
      <arg line="&#45;&#45;create_source_map=${main.outfile}.map"/>
      <arg line="&#45;&#45;manage_closure_dependencies"/>
      <arg line="&#45;&#45;externs=${externs}"/>
      <arg line="${srcfiles}"/>
      <arg line="${exportfiles}"/>
    </java>
    <loadfile srcfile="${main.compiledmin}" property="minimized"/>
    <concat destfile="${main.compiledmin}" eol="lf"><header filtering="no" trimleading="yes">${license}</header>${minimized}</concat>
  </target>
</project>
